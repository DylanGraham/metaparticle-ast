// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceSpecification service specification
// swagger:model serviceSpecification

type ServiceSpecification struct {

	// depends
	Depends string `json:"depends,omitempty"`

	// images
	Images []string `json:"images"`

	// reference
	Reference string `json:"reference,omitempty"`

	// replicas
	// Required: true
	Replicas *int32 `json:"replicas"`
}

/* polymorph serviceSpecification depends false */

/* polymorph serviceSpecification images false */

/* polymorph serviceSpecification reference false */

/* polymorph serviceSpecification replicas false */

// Validate validates this service specification
func (m *ServiceSpecification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReplicas(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceSpecification) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	return nil
}

func (m *ServiceSpecification) validateReplicas(formats strfmt.Registry) error {

	if err := validate.Required("replicas", "body", m.Replicas); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceSpecification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceSpecification) UnmarshalBinary(b []byte) error {
	var res ServiceSpecification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
